// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "gitlab.ozon.dev/e.gerasimov/telegram-bot/internal/types"
)

// MockmessageSender is a mock of messageSender interface.
type MockmessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockmessageSenderMockRecorder
}

// MockmessageSenderMockRecorder is the mock recorder for MockmessageSender.
type MockmessageSenderMockRecorder struct {
	mock *MockmessageSender
}

// NewMockmessageSender creates a new mock instance.
func NewMockmessageSender(ctrl *gomock.Controller) *MockmessageSender {
	mock := &MockmessageSender{ctrl: ctrl}
	mock.recorder = &MockmessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageSender) EXPECT() *MockmessageSenderMockRecorder {
	return m.recorder
}

// ChangeCurrency mocks base method.
func (m *MockmessageSender) ChangeCurrency(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCurrency", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCurrency indicates an expected call of ChangeCurrency.
func (mr *MockmessageSenderMockRecorder) ChangeCurrency(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCurrency", reflect.TypeOf((*MockmessageSender)(nil).ChangeCurrency), text, userID)
}

// CreateExpense mocks base method.
func (m *MockmessageSender) CreateExpense(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockmessageSenderMockRecorder) CreateExpense(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockmessageSender)(nil).CreateExpense), text, userID)
}

// DeleteMessage mocks base method.
func (m *MockmessageSender) DeleteMessage(userID int64, messageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", userID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockmessageSenderMockRecorder) DeleteMessage(userID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockmessageSender)(nil).DeleteMessage), userID, messageID)
}

// EditExpenseMessage mocks base method.
func (m *MockmessageSender) EditExpenseMessage(text string, userID int64, messageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditExpenseMessage", text, userID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditExpenseMessage indicates an expected call of EditExpenseMessage.
func (mr *MockmessageSenderMockRecorder) EditExpenseMessage(text, userID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditExpenseMessage", reflect.TypeOf((*MockmessageSender)(nil).EditExpenseMessage), text, userID, messageID)
}

// GetReport mocks base method.
func (m *MockmessageSender) GetReport(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReport indicates an expected call of GetReport.
func (mr *MockmessageSenderMockRecorder) GetReport(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockmessageSender)(nil).GetReport), text, userID)
}

// SendMessage mocks base method.
func (m *MockmessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockmessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockmessageSender)(nil).SendMessage), text, userID)
}

// MockexpensesDB is a mock of expensesDB interface.
type MockexpensesDB struct {
	ctrl     *gomock.Controller
	recorder *MockexpensesDBMockRecorder
}

// MockexpensesDBMockRecorder is the mock recorder for MockexpensesDB.
type MockexpensesDBMockRecorder struct {
	mock *MockexpensesDB
}

// NewMockexpensesDB creates a new mock instance.
func NewMockexpensesDB(ctrl *gomock.Controller) *MockexpensesDB {
	mock := &MockexpensesDB{ctrl: ctrl}
	mock.recorder = &MockexpensesDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpensesDB) EXPECT() *MockexpensesDBMockRecorder {
	return m.recorder
}

// GetExpense mocks base method.
func (m *MockexpensesDB) GetExpense(ctx context.Context, userID int64, expenseID int) (*types.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpense", ctx, userID, expenseID)
	ret0, _ := ret[0].(*types.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpense indicates an expected call of GetExpense.
func (mr *MockexpensesDBMockRecorder) GetExpense(ctx, userID, expenseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpense", reflect.TypeOf((*MockexpensesDB)(nil).GetExpense), ctx, userID, expenseID)
}

// GetMonthReport mocks base method.
func (m *MockexpensesDB) GetMonthReport(ctx context.Context, userID int64, date time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthReport", ctx, userID, date)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthReport indicates an expected call of GetMonthReport.
func (mr *MockexpensesDBMockRecorder) GetMonthReport(ctx, userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthReport", reflect.TypeOf((*MockexpensesDB)(nil).GetMonthReport), ctx, userID, date)
}

// WriteCategory mocks base method.
func (m *MockexpensesDB) WriteCategory(ctx context.Context, category string, userID int64, expenseID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCategory", ctx, category, userID, expenseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCategory indicates an expected call of WriteCategory.
func (mr *MockexpensesDBMockRecorder) WriteCategory(ctx, category, userID, expenseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCategory", reflect.TypeOf((*MockexpensesDB)(nil).WriteCategory), ctx, category, userID, expenseID)
}

// WriteDate mocks base method.
func (m *MockexpensesDB) WriteDate(ctx context.Context, date time.Time, userID int64, expenseID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteDate", ctx, date, userID, expenseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteDate indicates an expected call of WriteDate.
func (mr *MockexpensesDBMockRecorder) WriteDate(ctx, date, userID, expenseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDate", reflect.TypeOf((*MockexpensesDB)(nil).WriteDate), ctx, date, userID, expenseID)
}

// WriteExpense mocks base method.
func (m *MockexpensesDB) WriteExpense(ctx context.Context, fromID int64, expense *types.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteExpense", ctx, fromID, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteExpense indicates an expected call of WriteExpense.
func (mr *MockexpensesDBMockRecorder) WriteExpense(ctx, fromID, expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteExpense", reflect.TypeOf((*MockexpensesDB)(nil).WriteExpense), ctx, fromID, expense)
}

// WriteSum mocks base method.
func (m *MockexpensesDB) WriteSum(ctx context.Context, sum int, userID int64, expenseID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSum", ctx, sum, userID, expenseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSum indicates an expected call of WriteSum.
func (mr *MockexpensesDBMockRecorder) WriteSum(ctx, sum, userID, expenseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSum", reflect.TypeOf((*MockexpensesDB)(nil).WriteSum), ctx, sum, userID, expenseID)
}

// MockusersDB is a mock of usersDB interface.
type MockusersDB struct {
	ctrl     *gomock.Controller
	recorder *MockusersDBMockRecorder
}

// MockusersDBMockRecorder is the mock recorder for MockusersDB.
type MockusersDBMockRecorder struct {
	mock *MockusersDB
}

// NewMockusersDB creates a new mock instance.
func NewMockusersDB(ctrl *gomock.Controller) *MockusersDB {
	mock := &MockusersDB{ctrl: ctrl}
	mock.recorder = &MockusersDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersDB) EXPECT() *MockusersDBMockRecorder {
	return m.recorder
}

// GetCurrentState mocks base method.
func (m *MockusersDB) GetCurrentState(ctx context.Context, userID int64) (*types.UserStateType, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentState", ctx, userID)
	ret0, _ := ret[0].(*types.UserStateType)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCurrentState indicates an expected call of GetCurrentState.
func (mr *MockusersDBMockRecorder) GetCurrentState(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentState", reflect.TypeOf((*MockusersDB)(nil).GetCurrentState), ctx, userID)
}

// GetUserCurrency mocks base method.
func (m *MockusersDB) GetUserCurrency(ctx context.Context, userID int64) (types.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCurrency", ctx, userID)
	ret0, _ := ret[0].(types.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCurrency indicates an expected call of GetUserCurrency.
func (mr *MockusersDBMockRecorder) GetUserCurrency(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCurrency", reflect.TypeOf((*MockusersDB)(nil).GetUserCurrency), ctx, userID)
}

// SetCurrentState mocks base method.
func (m *MockusersDB) SetCurrentState(ctx context.Context, userID int64, state types.CurrentState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentState", ctx, userID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentState indicates an expected call of SetCurrentState.
func (mr *MockusersDBMockRecorder) SetCurrentState(ctx, userID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentState", reflect.TypeOf((*MockusersDB)(nil).SetCurrentState), ctx, userID, state)
}

// SetUserCurrency mocks base method.
func (m *MockusersDB) SetUserCurrency(ctx context.Context, userID int64, currency types.Currency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCurrency", ctx, userID, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCurrency indicates an expected call of SetUserCurrency.
func (mr *MockusersDBMockRecorder) SetUserCurrency(ctx, userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCurrency", reflect.TypeOf((*MockusersDB)(nil).SetUserCurrency), ctx, userID, currency)
}

// ToWaitState mocks base method.
func (m *MockusersDB) ToWaitState(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWaitState", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToWaitState indicates an expected call of ToWaitState.
func (mr *MockusersDBMockRecorder) ToWaitState(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWaitState", reflect.TypeOf((*MockusersDB)(nil).ToWaitState), ctx, userID)
}

// MockratesDB is a mock of ratesDB interface.
type MockratesDB struct {
	ctrl     *gomock.Controller
	recorder *MockratesDBMockRecorder
}

// MockratesDBMockRecorder is the mock recorder for MockratesDB.
type MockratesDBMockRecorder struct {
	mock *MockratesDB
}

// NewMockratesDB creates a new mock instance.
func NewMockratesDB(ctrl *gomock.Controller) *MockratesDB {
	mock := &MockratesDB{ctrl: ctrl}
	mock.recorder = &MockratesDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockratesDB) EXPECT() *MockratesDBMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockratesDB) GetCurrencyRate(ctx context.Context, currency types.Currency, date time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", ctx, currency, date)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockratesDBMockRecorder) GetCurrencyRate(ctx, currency, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockratesDB)(nil).GetCurrencyRate), ctx, currency, date)
}

// MocklimitsDB is a mock of limitsDB interface.
type MocklimitsDB struct {
	ctrl     *gomock.Controller
	recorder *MocklimitsDBMockRecorder
}

// MocklimitsDBMockRecorder is the mock recorder for MocklimitsDB.
type MocklimitsDBMockRecorder struct {
	mock *MocklimitsDB
}

// NewMocklimitsDB creates a new mock instance.
func NewMocklimitsDB(ctrl *gomock.Controller) *MocklimitsDB {
	mock := &MocklimitsDB{ctrl: ctrl}
	mock.recorder = &MocklimitsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklimitsDB) EXPECT() *MocklimitsDBMockRecorder {
	return m.recorder
}

// GetLimit mocks base method.
func (m *MocklimitsDB) GetLimit(ctx context.Context, userID int64, monthNo int) (int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimit", ctx, userID, monthNo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLimit indicates an expected call of GetLimit.
func (mr *MocklimitsDBMockRecorder) GetLimit(ctx, userID, monthNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimit", reflect.TypeOf((*MocklimitsDB)(nil).GetLimit), ctx, userID, monthNo)
}

// SetLimit mocks base method.
func (m *MocklimitsDB) SetLimit(ctx context.Context, userID int64, monthNo, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLimit", ctx, userID, monthNo, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLimit indicates an expected call of SetLimit.
func (mr *MocklimitsDBMockRecorder) SetLimit(ctx, userID, monthNo, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MocklimitsDB)(nil).SetLimit), ctx, userID, monthNo, limit)
}

// MockcurrencyUpdater is a mock of currencyUpdater interface.
type MockcurrencyUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockcurrencyUpdaterMockRecorder
}

// MockcurrencyUpdaterMockRecorder is the mock recorder for MockcurrencyUpdater.
type MockcurrencyUpdaterMockRecorder struct {
	mock *MockcurrencyUpdater
}

// NewMockcurrencyUpdater creates a new mock instance.
func NewMockcurrencyUpdater(ctrl *gomock.Controller) *MockcurrencyUpdater {
	mock := &MockcurrencyUpdater{ctrl: ctrl}
	mock.recorder = &MockcurrencyUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcurrencyUpdater) EXPECT() *MockcurrencyUpdaterMockRecorder {
	return m.recorder
}

// UpdateCurrencyRate mocks base method.
func (m *MockcurrencyUpdater) UpdateCurrencyRate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrencyRate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrencyRate indicates an expected call of UpdateCurrencyRate.
func (mr *MockcurrencyUpdaterMockRecorder) UpdateCurrencyRate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrencyRate", reflect.TypeOf((*MockcurrencyUpdater)(nil).UpdateCurrencyRate), ctx)
}
